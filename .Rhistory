}
colnames(crsa) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Notes")
crsa<-crsa[!crsa$SiteID=="" , ] #remove blank columns; thanks excel... not
crsa<-crsa[!crsa$SiteID==" " , ]
crsa$DNAsamp <- crsa$DNAsamp=="Y" | crsa$DNAsamp=="T"
crsa$Scales <- crsa$Scales=="Y" | crsa$Scales=="T"
crsa$Recap <- crsa$Recap=="Y" | crsa$Recap=="T"
crsa$Sex<-NA
crsa$Species<-"Om"
crsa$SiteTo<-NA
crsa$TagorNot<-NULL
crsa$TagSize <- as.integer(crsa$TagSize)
crsa$PITnum = as.character(sub(" ", "", crsa[,"PITnum"])) # Remove space from PITnum
#... combine the rst and AFD data
AFD <- rbind(AFD, crsa)
AFD <- distinct(AFD, SiteID, Date, FishNum, FL_mm, Wt_g, PITnum, TagSize, DNAsamp, Recap, .keep_all=T)
write_csv(AFD,"C:/Users/HaleyOhms/Documents/Carmel/Database/AllFishData.csv")
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
rm(list=ls())
require(dplyr)
require(tidyverse)
require(lubridate)
require(xlsx)
require(ggplot2)
# Main fish data file
AFD<-read_csv("C:/Users/HaleyOhms/Documents/Carmel/Database/AllFishData.csv", col_names = T,
col_types = cols(SiteID = "c", Date = col_date(), Pass = "d", FishNum = "d",
FL_mm = "d", Wt_g = "d", PITnum = "c", Recap = col_logical(),
TagSize = "i", DNAsamp = col_logical(), Notes = "c", SiteTo = "c",
Scales = "l", Species = "c", Sex = "c"))
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character","character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character","character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character","character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
for(1 in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character","character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
i=1
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character","character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
rm(list=ls())
require(dplyr)
require(tidyverse)
require(lubridate)
require(xlsx)
require(ggplot2)
# Main fish data file
AFD<-read_csv("C:/Users/HaleyOhms/Documents/Carmel/Database/AllFishData.csv", col_names = T,
col_types = cols(SiteID = "c", Date = col_date(), Pass = "d", FishNum = "d",
FL_mm = "d", Wt_g = "d", PITnum = "c", Recap = col_logical(),
TagSize = "i", DNAsamp = col_logical(), Notes = "c", SiteTo = "c",
Scales = "l", Species = "c", Sex = "c"))
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character","character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
require(dplyr)
require(tidyverse)
require(lubridate)
require(xlsx)
require(ggplot2)
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
i=1
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character","character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
i=1
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
tbl
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
i=1
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
i=1
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
i
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
files[i]
tbl
View(tbl)
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
files[i]
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Notes")
fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$Species<-"Om"
fallpop$SiteTo<-NA
fallpop$TagorNot<-NULL
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
AFD<-read_csv("C:/Users/HaleyOhms/Documents/Carmel/Database/AllFishData.csv", col_names = T,
col_types = cols(SiteID = "c", Date = col_date(), Pass = "d", FishNum = "d",
FL_mm = "d", Wt_g = "d", PITnum = "c", Recap = col_logical(),
TagSize = "i", DNAsamp = col_logical(), Notes = "c", SiteTo = "c",
Scales = "l", Species = "c", Sex = "c"))
############################################################################################
############################################################################################
## Compile Fall 2019 Pop Surveys
############################################################################################
############################################################################################
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Notes")
fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$Species<-"Om"
fallpop$SiteTo<-NA
fallpop$TagorNot<-NULL
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
36566+3591
#... combine the rst and AFD data
AFD <- rbind(AFD, fallpop)
AFD <- distinct(AFD, SiteID, Date, FishNum, FL_mm, Wt_g, PITnum, TagSize, DNAsamp, Recap, .keep_all=T)
write_csv(AFD,"C:/Users/HaleyOhms/Documents/Carmel/Database/AllFishData.csv")
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
AlldupTags <- Tdat[idx, ]
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
AlldupTags <- Tdat[idx, ]
View(AlldupTags)
AFD$PITnum[AFD$PITnum==""]
AFD$PITnum[AFD$PITnum==""] <- NA
AFD$PITnum[AFD$PITnum=="NANA"] <- NA
AFD$PITnum[AFD$PITnum=="NS"] <- NA
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
View(dupTags)
############################################################################################
############################################################################################
## Check for and fix duplicate tags
############################################################################################
############################################################################################
# ... change "" tags to NA
AFD$PITnum[AFD$PITnum==""] <- is.na()
############################################################################################
############################################################################################
## Check for and fix duplicate tags
############################################################################################
############################################################################################
# ... change "" tags to NA
is.na(AFD$PITnum[AFD$PITnum==""])
AFD$PITnum[AFD$PITnum=="NaN"] <- NA
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
View(dupTags)
AFD$PITnum[AFD$PITnum=="na"] <- NA
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
AlldupTags <- Tdat[idx, ]
View(AlldupTags)
View(AlldupTags)
unique(fallpop$Notes)
unique(AFD$Notes)
AFD$Notes[AFD$Notes=="MORT, NO EYES"] <- "MORT"
#... deal with morts in notes
unique(AFD$Notes)
AFD$Notes[AFD$Notes=="MORT"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT, NO EYES"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT"] <- "Mort"
AFD$Notes[AFD$Notes=="Mort. Side channel"] <- "Mort"
AFD$Notes[AFD$Notes=="Mort. Main channel"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT; tag removed"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT, no DNA sample"] <- "Mort"
AFD$Notes[AFD$Notes=="Drew blood-- MORT, body discarded, tag retrieved"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT, body discarded, tag retrieved"] <- "Mort"
AFD$Notes[AFD$Notes=="No tag, health concerns; MORT"] <- "Mort"
AFD$Notes[AFD$Notes=="Mort, no tag or scales"] <- "Mort"
AFD$Notes[AFD$Notes=="mort"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT / E-FISHING SCAR"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT, EFISHING SCAR"] <- "Mort"
AFD$Notes[AFD$Notes=="MORT, E-FISHING SCAR"] <- "Mort"
############################################################################################
############################################################################################
## Fix site names
############################################################################################
############################################################################################
unique(AFD$SiteID)
write_csv(AFD,"C:/Users/HaleyOhms/Documents/Carmel/Database/AllFishData.csv")
############################################################################################
############################################################################################
## Fix site names
############################################################################################
############################################################################################
unique(AFD$SiteID)
View(AFD)
rm(list=ls())
require(dplyr)
require(tidyverse)
require(lubridate)
require(xlsx)
require(ggplot2)
dir = "C:/Users/HaleyOhms/Documents/Carmel/Tag Data/NMFS_Data/TaggingHabitatScouting/2019/POP Surveys 2019/PIT Tagging"
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Notes")
fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$Species<-"Om"
fallpop$SiteTo<-NA
fallpop$TagorNot<-NULL
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... error on site 6 date
fallpop$Date[(fallpop$Date=="2018-09-05" & fallpop$SiteID=="6")] <- "2019-09-05"
fallpop$Date[(is.na(fallpop$Date) & fallpop$SiteID=="Boronda")] <- "2019-10-02"
#... Clean up morts
fallpop$Notes[fallpop$Notes=="MORT, NO EYES"] <- "Mort"
fallpop$Notes[fallpop$Notes=="MORT"] <- "Mort"
fallpop$Notes[fallpop$Notes=="Mort. Side channel"] <- "Mort"
fallpop$Notes[fallpop$Notes=="Mort. Main channel"] <- "Mort"
fallpop$Notes[fallpop$Notes=="MORT; tag removed"] <- "Mort"
fallpop$Notes[fallpop$Notes=="MORT, no DNA sample"] <- "Mort"
fallpop$Notes[fallpop$Notes=="Drew blood-- MORT, body discarded, tag retrieved"] <- "Mort"
fallpop$Notes[fallpop$Notes=="MORT, body discarded, tag retrieved"] <- "Mort"
fallpop$Notes[fallpop$Notes=="No tag, health concerns; MORT"] <- "Mort"
fallpop$Notes[fallpop$Notes=="Mort, no tag or scales"] <- "Mort"
fallpop$Notes[fallpop$Notes=="mort"] <- "Mort"
fallpop$Notes[fallpop$Notes=="MORT / E-FISHING SCAR"] <- "Mort"
fallpop$Notes[fallpop$Notes=="MORT, EFISHING SCAR"] <- "Mort"
fallpop$Notes[fallpop$Notes=="MORT, E-FISHING SCAR"] <- "Mort"
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
## Deal with duplicates
Tdat <- filter(fallpop, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
AlldupTags <- Tdat[idx, ]
View(AlldupTags)
write.csv(AlldupTags, "C:/Users/HaleyOhms/Documents/Carmel/Data Deliveries/DupTags.csv")
